fw <- fitdist(cts, "weibull")
# Get all tests
tests <- data.table::fread("alltests_1mar24jun_v1.csv")
# Keep only valid positive ct values for first tests
tests %>% filter(result == "positive", firsttest==TRUE,!is.na(cttarget)) %>% pull(cttarget) -> cts
# Fit Weibull Distribution
fw <- fitdist(cts, "weibull")
fw
library(tidyverse)
data <- read_csv("~/Dropbox/Oxygen_data.csv")
View(data)
B=10000
x  = data[1,]
boot= (rpois(B, x["Control_count"]) + 3/8)/(rpois(B, x["Control_count"]) + 3/8)
x["Control_count"]
unlist(x["Control_count"]))
unlist(x["Control_count"])
(rpois(B, unlist(x["Control_count"])) + 3/8)
boot= (rpois(B, unlist(x["Control_count"])) + 3/8)/(rpois(B, unlist(x["Control_count"])) + 3/8)
mean( unlist(x["Hypoxic_HL_norm"])/unlist(x["Oxic_HL_norm"]) < boot  )
B=15000
p_vals = apply(data, function(x){
print(x["gene"])
boot= (rpois(B, unlist(x["Control_count"])) + 3/8)/(rpois(B, unlist(x["Control_count"])) + 3/8)
return(c(unlist(x["gene"]), mean( unlist(x["Hypoxic_HL_norm"])/unlist(x["Oxic_HL_norm"]) <= boot  )))
})
p_vals = apply(data,1, FUN=function(x){
print(x["gene"])
boot= (rpois(B, unlist(x["Control_count"])) + 3/8)/(rpois(B, unlist(x["Control_count"])) + 3/8)
return(c(unlist(x["gene"]), mean( unlist(x["Hypoxic_HL_norm"])/unlist(x["Oxic_HL_norm"]) <= boot  )))
})
x
boot= (rpois(B, unlist(x["Control_count"])) + 3/8)/(rpois(B, unlist(x["Control_count"])) + 3/8)
p_vals = apply(data,1, FUN=function(x){
print(x["gene"])
boot= (rpois(B, unlist(x["Control_count"])) + 3/8)/(rpois(B, unlist(x["Control_count"])) + 3/8)
return(c(unlist(x["gene"]), mean( unlist(x["Hypoxic_HL_norm"])/unlist(x["Oxic_HL_norm"]) <= boot  )))
})
p_vals = apply(data,1, FUN=function(x){
print(c(x["gene"], x["Control_count"]))
boot= (rpois(B, unlist(x["Control_count"])) + 3/8)/(rpois(B, unlist(x["Control_count"])) + 3/8)
return(c(unlist(x["gene"]), mean( unlist(x["Hypoxic_HL_norm"])/unlist(x["Oxic_HL_norm"]) <= boot  )))
})
B=15000
p_vals = apply(data,1, FUN=function(x){
print(c(x["gene"], x["Control_count"]))
boot= (rpois(B, as.numeric(unlist(x["Control_count"]))) + 3/8)/(rpois(B, unlist(as.numeric(x["Control_count"]))) + 3/8)
return(c(unlist(x["gene"]), mean( as.nmeric( unlist(x["Hypoxic_HL_norm"]))/as.numeric(unlist(x["Oxic_HL_norm"])) <= boot  )))
})
B=15000
p_vals = apply(data,1, FUN=function(x){
print(c(x["gene"], x["Control_count"]))
boot= (rpois(B, as.numeric(unlist(x["Control_count"]))) + 3/8)/(rpois(B, unlist(as.numeric(x["Control_count"]))) + 3/8)
return(c(unlist(x["gene"]), mean( as.numeric( unlist(x["Hypoxic_HL_norm"]))/as.numeric(unlist(x["Oxic_HL_norm"])) <= boot  )))
})
data["ind"] = 1: nrow(data)
B=15000
p_vals = apply(data,1, FUN=function(x){
print(c(x["gene"], x["Control_count"], x["ind"]))
boot= (rpois(B, as.numeric(unlist(x["Control_count"]))) + 3/8)/(rpois(B, unlist(as.numeric(x["Control_count"]))) + 3/8)
return(c(unlist(x["gene"]), mean( as.numeric( unlist(x["Hypoxic_HL_norm"]))/as.numeric(unlist(x["Oxic_HL_norm"])) <= boot  )))
})
p_vals
View(p_vals)
B=15000
data <- data %>%
arange(desc(gene)) %>%
head(1000)
data <- data %>%
arrange(desc(gene)) %>%
head(1000)
View(data)
p_vals = apply(data,1, FUN=function(x){
print(c(x["gene"], x["Control_count"], x["ind"]))
boot= (rpois(B, as.numeric(unlist(x["Control_count"]))) + 3/8)/(rpois(B, unlist(as.numeric(x["Control_count"]))) + 3/8)
return(c(unlist(x["gene"]), mean( (3/8+ as.numeric( unlist(x["Hypoxic_HL_norm"])))/(3/8+ as.numeric(unlist(x["Oxic_HL_norm"]))) <= boot  )))
})
p_vals
View(p_vals)
data["pvals"] = as.numeric(p_vals[2,])
View(data)
data %>%
group_by(gene) %>%
summarize(pvalue = pbinom(sum(pvals<0.05), size = n(), prob = 0.05 ))
data_grp = data %>%
group_by(gene) %>%
summarize(pvalue = pbinom(sum(pvals<0.05), size = n(), prob = 0.05 ))
View(data_grp)
data_grp = data %>%
group_by(gene) %>%
summarize(pvalue = 1-pbinom(sum(pvals<0.05), size = n(), prob = 0.05 ))
help(pbinom)
pbinom(2, 2, 0.5)
pbinom(0, 2, 0.5)
pbinom(1, 2, 0.5)
data_grp = data %>%
group_by(gene) %>%
summarize(pvalue = 1-pbinom(sum(pvals<0.05), size = n(), prob = 0.05 ))
View(data_grp)
data_grp = data %>%
group_by(gene) %>%
summarize(pvalue = 1-pbinom(sum(pvals<0.05), size = n(), prob = 0.05 ),
grp = n(),
sign = sum(pvals<0.05))
View(data_grp)
View(data)
View(data_grp)
data_grp = data %>%
group_by(gene) %>%
summarize(pvalue = pbinom(sum(pvals<0.05), size = n(), prob = 0.05 ),
grp = n(),
sign = sum(pvals<0.05))
View(data_grp)
pbinom
pbinom(2,12,0.05)
1- 0.95^12 + 12 * 0.95^11 *0.05
1- 0.95^12 - 12 * 0.95^11 *0.05
data_grp = data %>%
group_by(gene) %>%
summarize( grp = n(),
sign = sum(pvals<0.05))
data_grp = data_grp %>% mutate(pval = 1-pbinom(sign, grp, 0.05))
data_grp = data_grp %>% mutate(pval = pbinom(sign, grp, 0.05, lower.tail=FALSE))
data_grp = data_grp %>% mutate(pval = pbinom(sign -1, grp, 0.05, lower.tail=FALSE))
View(data_grp)
p.adjust(data_grp, method = "BH")
p.adjust(data_grp$pval, method = "BH")
data_grp["pval_adjusted"] = p.adjust(data_grp$pval, method = "BH")
View(data_grp)
data <- read_csv("~/Dropbox/Oxygen_data.csv")
data["ind"] = 1: nrow(data)
B=15000
p_vals = apply(data,1, FUN=function(x){
print(c(x["gene"], x["Control_count"], x["ind"]))
boot= (rpois(B, as.numeric(unlist(x["Control_count"]))) + 3/8)/(rpois(B, unlist(as.numeric(x["Control_count"]))) + 3/8)
return(c(unlist(x["gene"]), mean( (3/8+ as.numeric( unlist(x["Hypoxic_HL_norm"])))/(3/8+ as.numeric(unlist(x["Oxic_HL_norm"]))) <= boot  )))
})
data["pvals"] = as.numeric(p_vals[2,])
data_grp = data %>%
group_by(gene) %>%
summarize( grp = n(),
sign = sum(pvals<0.05))
data_grp = data_grp %>% mutate(pval = pbinom(sign -1, grp, 0.05, lower.tail=FALSE))
data_grp["pval_adjusted"] = p.adjust(data_grp$pval, method = "BH")
fold_change_threshold=10
p_value_threshold=0.01
data_grp = data %>%
group_by(gene) %>%
summarize( grp = n(),
sign = sum(pvals<0.05),
median_fold_change = median((Hypoxic_HL_norm+3/8)/(Oxic_HL_norm+3/8)))
data_grp = data_grp %>% mutate(pval = pbinom(sign -1, grp, 0.05, lower.tail=FALSE))
data_grp["pval_adjusted"] = p.adjust(data_grp$pval, method = "BH")
fold_change_threshold=10
p_value_threshold=0.01
data_grp2 <- data_grp %>%
mutate(threshold = factor(case_when(median_fold_change > fold_change_threshold & p.value < p_value_threshold ~ "cond1",
median_fold_change < 1/fold_change_threshold & p.value < p_value_threshold ~ "cond2",
TRUE ~ "cond3")))
data_grp2 <- data_grp %>%
mutate(threshold = factor(case_when(median_fold_change > fold_change_threshold & pval_adjusted < p_value_threshold ~ "cond1",
median_fold_change < 1/fold_change_threshold & pval_adjusted  < p_value_threshold ~ "cond2",
TRUE ~ "cond3")))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=Gene_alias))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)))+
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
library(ggrepel)
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=Gene_alias))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)))+
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)))+
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
p_value_threshold=0.05
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)))+
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
p_value_threshold=0.05
data_grp2 <- data_grp %>%
mutate(threshold = factor(case_when(median_fold_change > fold_change_threshold & pval_adjusted < p_value_threshold ~ "cond1",
median_fold_change < 1/fold_change_threshold & pval_adjusted  < p_value_threshold ~ "cond2",
TRUE ~ "cond3")))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)))+
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=1)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=3)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=3, angle=30)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=2, angle=30)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
g = data_grp["gene"][1]
temp = pivot_longer(data %>% filter(gene == g), cols=c("Hypoxic_HL_norm", "Oxic_HL_norm"))
data %>% filter(gene == g)
g
g = data_grp$gene
g
g= g[1]
g
temp = pivot_longer(data %>% filter(gene == g), cols=c("Hypoxic_HL_norm", "Oxic_HL_norm"))
temp
data_grp = data %>%
group_by(gene) %>%
summarize( grp = n(),
sign = sum(pvals<0.025, pvals>0.975),
median_fold_change = median((Hypoxic_HL_norm+3/8)/(Oxic_HL_norm+3/8)))
data_grp = data_grp %>% mutate(pval = pbinom(sign -1, grp, 0.05, lower.tail=FALSE))
data_grp["pval_adjusted"] = p.adjust(data_grp$pval, method = "BH")
fold_change_threshold=10
p_value_threshold=0.05
data_grp2 <- data_grp %>%
mutate(threshold = factor(case_when(median_fold_change > fold_change_threshold & pval_adjusted < p_value_threshold ~ "cond1",
median_fold_change < 1/fold_change_threshold & pval_adjusted  < p_value_threshold ~ "cond2",
TRUE ~ "cond3")))
hist(Method6$p.value)
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=2, angle=30)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold, size=grp))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=2, angle=30)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
data_grp2$grp
data_grp = data %>%
group_by(gene) %>%
summarize( grp = n(),
sign = sum(pvals<0.05),
median_fold_change = median((Hypoxic_HL_norm+3/8)/(Oxic_HL_norm+3/8)))
data_grp = data_grp %>% mutate(pval = pbinom(sign -1, grp, 0.05, lower.tail=FALSE))
data_grp["pval_adjusted"] = p.adjust(data_grp$pval, method = "BH")
fold_change_threshold=10
p_value_threshold=0.05
data_grp2 <- data_grp %>%
mutate(threshold = factor(case_when(median_fold_change > fold_change_threshold & pval_adjusted < p_value_threshold ~ "cond1",
median_fold_change < 1/fold_change_threshold & pval_adjusted  < p_value_threshold ~ "cond2",
TRUE ~ "cond3")))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold, size=grp))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=2, angle=30)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
ggplot(data_grp2 , aes(x=median_fold_change, y=-log(pval_adjusted, base=10), label=gene))+
geom_point(aes(color=threshold, size=log(grp)))+
scale_x_log10(name="Fold change (Hypoxic/Oxic)")+
scale_y_continuous(name="-log(p-value)")+
geom_text_repel(data=subset(data_grp2, pval_adjusted < p_value_threshold & (median_fold_change > fold_change_threshold | median_fold_change< 1/fold_change_threshold)),
size=2, angle=30)+
# theme(element)
theme_classic()+
scale_color_manual(name = "Threshold",
values = c("cond1" = "red", "cond2" = "green", "cond3" = "grey90"))
help("quantile")
shiny::runApp('Dropbox/aerosol_transmission_model')
runApp('Dropbox/aerosol_transmission_model')
#### Albert Hall
setwd("~/Dropbox/aerosol_transmission_model/")
source("code_experiments_paper/covid_projectons.R")
#source("proba_symptoms.R")
source("helper_functions.R")
source("vaccination.R")
source("aerosol_functions.R")
source("beta_params.R")
source("covid_case_predictions.R")
source("under_ascertainment_bias.R")
source("screening_efficiency.R")
source("relative_infectiousness.R")
library(ggplot2)
MASK_EFFICIENCY = 0.5  ### 50% is the recommended value
##### Set parameters
input = list("country" =  "United Kingdom",
"date_event" = as.Date("2021-03-20"),
"temperature" = 23,
"UV"=0,
"RH"=50,
"time2event"=2,
"duration" = 3*60/60, #### time must be in hours
"unit" =0,
"length" =50,
"width" =50,
"height"=5,
"temperature"=20,
"RH"=40,
"UV" =3,
"ventilation"="Daycare",
"control"=0,
"activity"="Standing:Loudly speaking",
"mask"=0.0,
"prop_mask"=100,
"mixing"=0,
"p_symptoms" =0.4,
"p_lie" = 0.5,
file1=NULL
)
B=50000
N_TOT = 2500
volume = 86650
surface = 20000
country = input$country
PERIOD_FOR_FITTING = 14
NCURVES = 100
MAX_DATE = input$date_event - 28
COUNTRY_DATA <- read.csv(file="https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv", header=T, sep=",")
COUNTRY_DATA$date <- (as.Date(COUNTRY_DATA$date, "%Y-%m-%d"))
VACCINATIONS <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv")
VACCINATIONS_US <- read_csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/us_state_vaccinations.csv")
intersection_col = intersect(colnames(VACCINATIONS), colnames(VACCINATIONS_US))
VACCINATIONS <- rbind(VACCINATIONS[,intersection_col], VACCINATIONS_US[,intersection_col] %>% filter(location != "United States"))
PERIOD_FOR_PREDICTING = 28
DECAY = max(0, (7.57+
1.41* (input$temperature-20.54)/10.66 +
0.0218 *(input$RH-45.24)/28.67 +
7.55 *((input$UV*0.185)-50) / 50 +
(input$temperature-20.54)/10.66*(input$UV*0.185-50)/50*1.40) *60)  #https://www.dhs.gov/science-and-technology/sars-airborne-calculator
BREATHING_RATE = 0.012 * 60
DEPOSITION = 0.24
MASK_INHALATION_EFFICIENCY = 0.5
PRESSURE = 0.95
######################################################################
######################################################################
##### Step 1: compute future prevalence
######################################################################
######################################################################
data2fit = COUNTRY_DATA %>%
dplyr::filter(location=="United Kingdom", date >  input$date_event- PERIOD_FOR_FITTING, date <= input$date_event)
res_1 <- predict_prevalence(origin=input$date_event -28, country=country,
country_data = COUNTRY_DATA,nb_curves=NCURVES,
distance=Difference_function,
period4predicting=28, period4fitting = PERIOD_FOR_FITTING,
distance_type = "MSE", agg=median)
res_1$res["Date"] = input$date_event
res_1$output["Date"] = input$date_event
prevalence_df = res_1$res
test = res_1$output
test["trajectory"] = sapply(1:nrow(test), FUN=function(x){x%/%(PERIOD_FOR_FITTING+PERIOD_FOR_PREDICTING)})
prevalence_df["region"] = country
samples_prev = res_1$samples
samples_prev["region"] = country
bias<- compute_underascertainment_bias(input$date_event - (PERIOD_FOR_FITTING+PERIOD_FOR_PREDICTING), "United Kingdom",
COUNTRY_DATA, date_max = input$date_event - 28,
Case_to_death_delay= 21, plot=FALSE)
bias_corr  = mean(bias$value)
bias_sd  = sd(bias$value)
future_prevalence_df = prevalence_df %>%
mutate(prevalence = 1/bias_corr * prevalence,
sd_prevalence = 1/bias_corr * sd_prevalence,
Observed = 1/bias_corr *  Observed,
q975 = 1/bias_corr *  q975,
q50 = 1/bias_corr *  q50,
q25 = 1/bias_corr *  q25,
)
future_prevalence_df = future_prevalence_df %>% mutate(ymin = prevalence -2*sd_prevalence,
ymax = prevalence + 2*sd_prevalence)
future_prevalence_df["ymin"] = sapply(future_prevalence_df["ymin"], function(x){ifelse(x<0,0,x)})
future_prevalence_df["ymax"] = sapply(future_prevalence_df["ymax"], function(x){ifelse(x>1,1,x)})
ggplot(future_prevalence_df)+
geom_line(aes(x=Date_of_cases, y=1e6 * prevalence, colour="Predicted"))+
geom_line(aes(x=Date_of_cases, y=1e6*Observed, colour="Observed"))+
geom_ribbon(aes(x=Date_of_cases, ymin=1e6 * q25, ymax=1e6*q975), colour="grey", alpha=0.5)+
theme_bw()+ xlab("Date") + ylab("Incidence (per Million)")+
ggtitle("Predicted Incidence (per Million) Per Region")
future_prevalence_df["Date_event"] = input$date_event
res_1$output
future_prevalence_df2  = data.frame("time" = 1:(PERIOD_FOR_PREDICTING + 1),
"prevalence" =  1/bias_corr * 1e-6 * data2fit$new_cases_smoothed_per_million,
"sd_prevalence" = rep(0,PERIOD_FOR_PREDICTING+1),
"Date_of_cases" =seq(from=as.Date(as.character(input$date_event)) - PERIOD_FOR_PREDICTING, to = as.Date(as.character(input$date_event)), by="day"))
bias_corr
1:(PERIOD_FOR_PREDICTING + 1)
1/bias_corr * 1e-6 * data2fit$new_cases_smoothed_per_million
length(1/bias_corr * 1e-6 * data2fit$new_cases_smoothed_per_millio)
length(1/bias_corr * 1e-6 * data2fit$new_cases_smoothed_per_million)
data2fit = COUNTRY_DATA %>% filter(date >= as.Date(as.character(input$date_event)) - PERIOD_FOR_PREDICTING,
date <= as.Date(as.character(input$date_event)), location == input$country) %>%  select(new_cases_smoothed_per_million)
data2fit = COUNTRY_DATA %>% filter(date >= as.Date(as.character(input$date_event)) - PERIOD_FOR_PREDICTING,
date <= as.Date(as.character(input$date_event)), location == input$country) %>%  select(new_cases_smoothed_per_million)
future_prevalence_df  = data.frame("time" = 1:(PERIOD_FOR_PREDICTING + 1),
"prevalence" =  1/bias_corr * 1e-6 * data2fit$new_cases_smoothed_per_million,
"sd_prevalence" = rep(0,PERIOD_FOR_PREDICTING+1),
"Date_of_cases" =seq(from=as.Date(as.character(input$date_event)) - PERIOD_FOR_PREDICTING, to = as.Date(as.character(input$date_event)), by="day"))
future_prevalence_df
test
samples_prev = rep(future_prevalence_df, NCURVES)
dim(samples_prev)
rep(future_prevalence_df, 2)
samples_prev = c()
for (i in 1:NCURVES){
samples_prev = rbind(samples_prev, future_prevalence_df)
}
samples_prev
colnames(test)
colnames(samples_prev)
colnames(samples_prev) = c("time", "value", "sd_prev", "Date")
samples_prev["trajectory"] = sapply(1:nrow(test), FUN=function(x){x%/%(PERIOD_FOR_FITTING+PERIOD_FOR_PREDICTING)})
samples_prev["trajectory"] = sapply(1:nrow(test), FUN=function(x){x%/%(1+PERIOD_FOR_PREDICTING)})
length(sapply(1:nrow(test), FUN=function(x){x%/%(1+PERIOD_FOR_PREDICTING)}))
samples_prev["trajectory"] = rep(0:(PERIOD_FOR_PREDICTING), NCURVES)
df = pivot_wider(future_prevalence_df %>% select(time, prevalence), names_from = c("time"), values_from = "prevalence")
#proba_null <- future_prevalence_df[PERIOD_FOR_PREDICTING,"prevalence"]
nb_people_infected <- sum(N_TOT * df)
#### Effect of the test + symptoms screening
df_sample = (sapply(1:B, FUN=function(x){
return((test %>% dplyr::filter(trajectory==  sample(1:NCURVES, 1) , time>=0))$value/1e6)}))
samples_prev["trajectory"] = sapply(1:NCURVES, function(x){rep(x, PERIOD_FOR_PREDICTING+1)})
samples_prev = c()
for (i in 1:NCURVES){
samples_prev = rbind(samples_prev, future_prevalence_df)
}
colnames(samples_prev) = c("time", "value", "sd_prev", "Date")
samples_prev["trajectory"] = sapply(1:NCURVES, function(x){rep(x, PERIOD_FOR_PREDICTING+1)})
uu = sapply(1:NCURVES, function(x){rep(x, PERIOD_FOR_PREDICTING+1)})
uu
unlist(sapply(1:NCURVES, function(x){rep(x, PERIOD_FOR_PREDICTING+1)}))
rep(1, PERIOD_FOR_PREDICTING+1)
as.vector(sapply(1:NCURVES, function(x){rep(x, PERIOD_FOR_PREDICTING+1)}))
samples_prev["trajectory"] = as.vector(sapply(1:NCURVES, function(x){rep(x, PERIOD_FOR_PREDICTING+1)}))
#### Effect of the test + symptoms screening
df_sample = (sapply(1:B, FUN=function(x){
return((test %>% dplyr::filter(trajectory==  sample(1:NCURVES, 1) , time>=0))$value/1e6)}))
dim(df_sample )
df_sample <- data.frame(matrix(unlist(df_sample),
nrow=B, byrow=TRUE))
df_sample <- data.frame(matrix(unlist(df_sample),
nrow=B, byrow=TRUE))
colnames(df_sample) = group_assignment
group_assignment = c(sapply(0:PERIOD_FOR_PREDICTING, function(x){paste0(x)})) #### STOP one day before the event
colnames(df_sample) = group_assignment
proba_baseline <- df_sample$`28`
length(infectiousness_all)
infectiousness_all = compute_relative_infectiousness(input, PERIOD_FOR_PREDICTING,
plot=FALSE)
length( infectiousness_all)
dim( infectiousness_all)
runApp()
runApp()
runApp()
